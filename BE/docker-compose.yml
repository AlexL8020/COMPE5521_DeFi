# docker-compose.yml
version: "3.8"

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: my-ts-app-container # Revert name if changed
    ports:
      - "${APP_PORT:-3000}:${PORT:-3000}" # Use variables from .env
    environment:
      # Use variables resolved by Docker Compose (from .env or defaults)
      MONGODB_URI: "mongodb://${MONGO_USER:-user}:${MONGO_PASSWORD:-password}@mongo:27017" # Base URI
      MONGODB_DB_NAME: "${MONGODB_DB_NAME:-myDockerTSDB}"
      PORT: "${PORT:-3000}"
      NODE_ENV: "${NODE_ENV:-development}"
      MONGO_USER: "${MONGO_USER:-user}" # Pass resolved value
      MONGO_PASSWORD: "${MONGO_PASSWORD:-password}" # Pass resolved value
    volumes:
      - ./src:/usr/src/app/src
    depends_on:
      - mongo
    # command: npm run dev:tsnode # Keep if you want nodemon, remove for production CMD

  mongo:
    image: mongo:latest
    container_name: my-mongo-db-ts # Revert name if changed
    ports:
      - "27017:27017"
    environment:
      # Use the SAME variables resolved by Docker Compose for initialization
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_USER:-user}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_PASSWORD:-password}"
    volumes:
      - mongodata_ts:/data/db # <-- Use original volume name

volumes:
  mongodata_ts: # <-- Use original volume name
    driver: local
